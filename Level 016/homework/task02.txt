**While ციკლის მუშაობის ახსნა:**

### ნახაზი:

```
+------------------------+
|      პირველი ნაბიჯი    |
|   (მოთხოვნა პირობის     |
|    შესრულების თხოვნა)   |
+------------------------+
           |
           V
+-------------------------+
|    პირობის შემოწმება    |
|   (თუ პირობა სიმართლეა?) |
+-------------------------+
           |
      +----+-----+
      |          |
  [Yes]       [No]
    |           |
    V           |
+---------------------------+ 
|     შესრულება             |
|   (კოდის ნაწილების        |
|    შესრულება)            |
+---------------------------+
           |
           V
+----------------------------+
|    მორიგი პირობის გადამოწმება|
+----------------------------+
           |
           V
       (გაგრძელება ან შეწყვეტა)
```

### ახსნა:

`while` ციკლი არის ტიპი **ლუპის** (ციკლის), რომელიც მუშაობს მანამ, სანამ წინასწარ განსაზღვრული პირობა **True** იქნება.

**1. პირველი ნაბიჯი:**
   - პროგრამა იწყებს მუშაობას და ითხოვს პირობის შემოწმებას.
   
**2. პირობის შემოწმება:**
   - პროგრამა შეამოწმებს პირობას, რომელიც მითითებულია `while`-ში.
   - თუ პირობა **True**-ია (ან სიმართლეა), პროგრამა გააგრძელებს მუშაობას და დაიწყებს შესასრულებელ ნაწილს.
   - თუ პირობა **False**-ია (ან ტყუილია), ციკლი შეწყდება და პროგრამა გადადის შემდეგ ნაბიჯზე.

**3. შესრულება (პირველი ნაბიჯი):**
   - თუ პირობა **True**-ია, ციკლი შესრულდება, რაც ნიშნავს, რომ კოდი, რომელიც მოცემულია ციკლის შიგნით, შესრულდება.
   
**4. მორიგი შემოწმება:**
   - ყველა შესრულების შემდეგ, პირობა კვლავ შემოწმდება.
   - პროცესი იმეორდება მანამ, სანამ პირობა **True** დარჩება.

**5. შეწყვეტა (თუ პირობა False გახდა):**
   - თუ პირობა **False** გახდა, ციკლი შეწყვეტს მუშაობას და პროგრამა გადადის შემდეგ ნაბიჯზე.

---

### პრაქტიკული მაგალითი:

```python
counter = 1  # მორგებული ცვლადი, რომელიც იწყება 1-ით

while counter <= 5:  # ციკლი შეამოწმებს, არის თუ არა counter 5-ზე ნაკლები
    print(counter)  # დაბეჭდავს ცვლადის მნიშვნელობას
    counter += 1  # ზრდის counter-ს ყოველ ჯერზე

print("Loop has finished.")
```

### როგორ მუშაობს:
1. **`counter`** იწყება 1-ით.
2. ციკლი შეამოწმებს პირობას: თუ **`counter <= 5`**.
3. თუ პირობა **True**-ია (1 <= 5), ციკლი შესრულდება და დაბეჭდავს `counter`-ის მნიშვნელობას.
4. შემდეგ **`counter`** იზრდება 1-ით (counter += 1).
5. პროცესს განმეორებით გადის თითოეულ ნაბიჯზე, სანამ **`counter`** გახდება 6, რაც უკვე განიხილება როგორც **False**, რადგან **6 <= 5** აღარ არის სიმართლე.
6. ციკლი შეწყვეტს მუშაობას და დაბეჭდავს "Loop has finished."

### Output:
```
1
2
3
4
5
Loop has finished.
```

---

### როგორ მუშაობს:
- **`while`** ციკლი მუშაობს, როგორც **"გრძელდება მანამ, სანამ პირობა სრულდება"**.
- **`while`** ითხოვს პირობის განმარტებას და თუ ის **True**-ია, პროგრამა განაგრძობს.
- თუ პირობა **False** გახდა, ციკლი ჩერდება.

**შენიშვნა**: ყოველთვის უნდა დარწმუნდეთ, რომ ციკლში რამე ისეთი ხდება, რაც პირობას ხდის False-ს, ან ციკლი უსასრულოდ იმუშავებს! (მაგალითად, `counter`-ის გაზრდა ციკლში).