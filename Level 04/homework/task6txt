გაოფის სიმბოლო / და ნაშთიანი გაყოფის სიმბოლო % ციფრული ოპერაციებია, რომლებსაც განსხვავებული მიზნები აქვთ:

1. გაყოფა /: ეს ოპერაცია ადგენს ობიექტების განაწილებას ისე, რომ მიიღება სრული რაოდენობა (თითოეულის წილი). მაგალითად, თუ გვაქვს 10 ვაშლი და გავყოფთ 3 ადამიანზე, შედეგი იქნება 3.33 (ანუ თითო ადამიანს 3.33 ვაშლი ხვდება).

მაგალითი:

10 / 3 = 3.33



2. ნაშთიანი გაყოფა %: ეს ოპერაცია გვეუბნება, რამდენი ობიექტი დარჩება გაყოფის შემდეგ. ანუ, თუ 10 ვაშლი გავყოფთ 3 ადამიანზე, 1 ვაშლი დარჩება ნაშთად.

მაგალითი:

10 % 3 = 1




მოკლედ რომ ვთქვათ:

/ გეუბნება, რამდენჯერ შეიძლება გაიყოს რიცხვი.

% გეუბნება, რამდენი დარჩება გაყოფის შემდეგ.
You sent
Python-ში მონაცემები ძირითადად იყოფა შემდეგ ნაწილებად:

1. Primitive (მარტივი) მონაცემთა ტიპები:

int (მთლიანი რიცხვი): იყენება მთელი რიცხვებისთვის. მაგალითი: 5, -10.

float (გაგრძობადი რიცხვი): გამოიყენება ათწილადი რიცხვებისთვის. მაგალითად: 3.14, -0.001.

str (სტრიქონი): გამოიყენება ტექსტისთვის. მაგალითი: "hello", "world".

bool (ლოგიკური ტიპი): გამოიყენება ჭეშმარიტი ან მცდარი მნიშვნელობებისთვის. მაგალითი: True, False.



2. Compound (შემდგარი) მონაცემთა ტიპები:

list (სია): შეიცავს ელემენტების კოლექციას, რომელიც შეიძლება იყოს სხვადასხვა ტიპის. მაგალითი: [1, 2, 3, "text"].

tuple (კრებული): მსგავსია სიასთან, მაგრამ მისი ელემენტები უცვლელია. მაგალითი: (1, 2, "hello").

set (მრავალი): შეიცავს უნიკალურ ელემენტებს. მაგალითი: {1, 2, 3}.

dict (ლექსიკონი): შეიცავს წყვილებს "გასაღები: მნიშვნელობა". მაგალითი: {"name": "John", "age": 25}.



3. Special (განსაკუთრებული) მონაცემები:

NoneType: აღნიშნავს, რომ მონაცემს არ აქვს მნიშვნელობა. მაგალითი: None.

bytes და bytearray: გამოიყენება ბინარული მონაცემების შესანახად.




სად ვიყენებთ:

Primitive ტიპები გამოიყენება მაშინ, როცა გვჭირდება კონკრეტული ტიპის ინფორმაცია, მაგალითად, რიცხვითი გამოთვლები ან ტექსტის დამუშავება.

Compound ტიპები გამოიყენება, როცა გვჭირდება მონაცემთა კოლექციების შექმნა, როგორიცაა სიები, ლექსიკონები ან კრებულები.